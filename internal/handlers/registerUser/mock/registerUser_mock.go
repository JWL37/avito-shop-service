// Code generated by MockGen. DO NOT EDIT.
// Source: registerUser.go

// Package registeruser is a generated GoMock package.
package registeruser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRegistrater is a mock of UserRegistrater interface.
type MockUserRegistrater struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistraterMockRecorder
}

// MockUserRegistraterMockRecorder is the mock recorder for MockUserRegistrater.
type MockUserRegistraterMockRecorder struct {
	mock *MockUserRegistrater
}

// NewMockUserRegistrater creates a new mock instance.
func NewMockUserRegistrater(ctrl *gomock.Controller) *MockUserRegistrater {
	mock := &MockUserRegistrater{ctrl: ctrl}
	mock.recorder = &MockUserRegistraterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegistrater) EXPECT() *MockUserRegistraterMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserRegistrater) Register(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserRegistraterMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRegistrater)(nil).Register), arg0, arg1)
}
