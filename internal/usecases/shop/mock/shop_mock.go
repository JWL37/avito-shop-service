// Code generated by MockGen. DO NOT EDIT.
// Source: shop.go

// Package mock is a generated GoMock package.
package mock

import (
	models "avito-shop-service/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItemBuyer is a mock of ItemBuyer interface.
type MockItemBuyer struct {
	ctrl     *gomock.Controller
	recorder *MockItemBuyerMockRecorder
}

// MockItemBuyerMockRecorder is the mock recorder for MockItemBuyer.
type MockItemBuyerMockRecorder struct {
	mock *MockItemBuyer
}

// NewMockItemBuyer creates a new mock instance.
func NewMockItemBuyer(ctrl *gomock.Controller) *MockItemBuyer {
	mock := &MockItemBuyer{ctrl: ctrl}
	mock.recorder = &MockItemBuyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemBuyer) EXPECT() *MockItemBuyerMockRecorder {
	return m.recorder
}

// AddItemToInventory mocks base method.
func (m *MockItemBuyer) AddItemToInventory(arg0 context.Context, arg1 string, arg2 *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToInventory", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemToInventory indicates an expected call of AddItemToInventory.
func (mr *MockItemBuyerMockRecorder) AddItemToInventory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToInventory", reflect.TypeOf((*MockItemBuyer)(nil).AddItemToInventory), arg0, arg1, arg2)
}

// GetItemByName mocks base method.
func (m *MockItemBuyer) GetItemByName(arg0 context.Context, arg1 string) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByName", arg0, arg1)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByName indicates an expected call of GetItemByName.
func (mr *MockItemBuyerMockRecorder) GetItemByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByName", reflect.TypeOf((*MockItemBuyer)(nil).GetItemByName), arg0, arg1)
}

// GetUserBalance mocks base method.
func (m *MockItemBuyer) GetUserBalance(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockItemBuyerMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockItemBuyer)(nil).GetUserBalance), arg0, arg1)
}
