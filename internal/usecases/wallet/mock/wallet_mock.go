// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go

// Package mock is a generated GoMock package.
package mock

import (
	models "avito-shop-service/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSendCoiner is a mock of SendCoiner interface.
type MockSendCoiner struct {
	ctrl     *gomock.Controller
	recorder *MockSendCoinerMockRecorder
}

// MockSendCoinerMockRecorder is the mock recorder for MockSendCoiner.
type MockSendCoinerMockRecorder struct {
	mock *MockSendCoiner
}

// NewMockSendCoiner creates a new mock instance.
func NewMockSendCoiner(ctrl *gomock.Controller) *MockSendCoiner {
	mock := &MockSendCoiner{ctrl: ctrl}
	mock.recorder = &MockSendCoinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendCoiner) EXPECT() *MockSendCoinerMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockSendCoiner) GetUserBalance(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockSendCoinerMockRecorder) GetUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockSendCoiner)(nil).GetUserBalance), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockSendCoiner) GetUserByUsername(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockSendCoinerMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockSendCoiner)(nil).GetUserByUsername), arg0)
}

// SendCoinToUser mocks base method.
func (m *MockSendCoiner) SendCoinToUser(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinToUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinToUser indicates an expected call of SendCoinToUser.
func (mr *MockSendCoinerMockRecorder) SendCoinToUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinToUser", reflect.TypeOf((*MockSendCoiner)(nil).SendCoinToUser), arg0, arg1, arg2, arg3)
}
